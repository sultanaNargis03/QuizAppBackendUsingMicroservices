package com.telusko.service;

import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.MultiValueMap;

import com.telusko.exception.QuestionNotFoundException;
import com.telusko.model.Question;
import com.telusko.model.QuestionWrapper;
import com.telusko.model.Response;
import com.telusko.repo.QuestionRepo;

@Service 
public class QuestionService 
{
	@Autowired
	private QuestionRepo questionRepo;
	
	public List<Question> getAllQuestions()
	{
		return questionRepo.findAll();
	}
	
	public String addQuestion(Question question)
	{
		Integer id=questionRepo.save(question).getId();
		
		return "Question added with id : "+id;
	}
	
	public List<Question> getQuestionsByCategory(String category)
	{
		return questionRepo.findByCategory(category);
	}
	
	public String updateQuestionById(Integer id,Question question) 
	{
		 if(questionRepo.findById(id).isPresent())
		 {
			 questionRepo.save(question);
			 
			 return "Question with id "+id+" has updated successfully!!";
		 }
		 else
		 {
			 throw new QuestionNotFoundException("Question with id "+id+" doesn't exist!!");
		 }
	}
	
	public String deleteQuestionById(Integer id) 
	{
		 if(questionRepo.findById(id).isPresent())
		 {
			 questionRepo.deleteById(id);
			 
			 return "Question with id "+id+" has deleted successfully!!";
		 }
		 else
		 {
			 throw new QuestionNotFoundException("Question with id "+id+" doesn't exist!!");
		 }
	}

	public List<Integer> generateRandomQuestionsForQuiz(String category, Integer numQ) 
	{
		return questionRepo.findRandomQuestionsByCategory(category, numQ);
	}

	public List<QuestionWrapper> getQuestionsFromId(List<Integer> questionIds) 
	{
		List<Question> questions=new ArrayList<>();
		List<QuestionWrapper>wrappers=new ArrayList<>();
		
		for(Integer id:questionIds)
		{
			questions.add(questionRepo.findById(id).get());
		}
		for(Question question:questions)
		{
			QuestionWrapper wrapper=new QuestionWrapper();
			wrapper.setId(question.getId());
			wrapper.setQuestionTitle(question.getQuestionTitle());
			wrapper.setOption1(question.getOption1());
			wrapper.setOption2(question.getOption2());
			wrapper.setOption3(question.getOption3());
			wrapper.setOption4(question.getOption4());
			
			wrappers.add(wrapper);
		}
		return wrappers;
	}

	public Integer getScore(List<Response> responses)
	{
		int score=0;
		Integer id=0;

			for(Response response:responses)
			{
				
				if(response.equals(questionRepo.findById(id).get().getRightAnswer()))
				{
					score+=1;
				}
				id++;
			}

		return score;
	}
	
}
